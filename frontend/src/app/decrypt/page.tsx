'use client'

import React from "react"
import { ethers } from 'ethers'
import lighthouse from '@lighthouse-web3/sdk'
import { usePrivy, useWallets } from "@privy-io/react-auth";

function App() {

    const [fileURL, setFileURL] = React.useState(null)
    const { wallets } = useWallets();


    const embeddedWallet = wallets.find((wallet) => wallet.walletClientType === 'privy');
    const { user, signMessage } = usePrivy();


    const uiConfig = {
        title: 'Sample title text',
        description: 'Sample description text',
        buttonText: 'Sample button text'
    };

    const address = embeddedWallet.address

    const encryptionSignature = async () => {
        const eip1193provider = await embeddedWallet.getEthereumProvider();
        const messageRequested = (await lighthouse.getAuthMessage(address)).data.message
        const signedMessage = await signMessage(messageRequested, uiConfig);
        return ({
            signedMessage: signedMessage,
            publicKey: address
        })
    }

    /* Decrypt file */
    const decrypt = async () => {
        // Fetch file encryption key
        const cid = "QmRJS5VC6qTvuvu47VNuQjKuEZnnPyT3NFRpj9NU6GR7Wf" //replace with your IPFS CID
        const { publicKey, signedMessage } = await encryptionSignature()
        /*
          fetchEncryptionKey(cid, publicKey, signedMessage)
            Parameters:
              CID: CID of the file to decrypt
              publicKey: public key of the user who has access to file or owner
              signedMessage: message signed by the owner of publicKey
        */
        const keyObject = await lighthouse.fetchEncryptionKey(
            cid,
            publicKey,
            signedMessage
        )

        // Decrypt file
        /*
          decryptFile(cid, key, mimeType)
            Parameters:
              CID: CID of the file to decrypt
              key: the key to decrypt the file
              mimeType: default null, mime type of file
        */
        const fileType = "application/pdf"
        const decrypted = await lighthouse.decryptFile(cid, keyObject.data.key, fileType)
        console.log(decrypted)
        /*
          Response: blob
        */

        // View File
        const url = URL.createObjectURL(decrypted)
        console.log(url)
        setFileURL(url)
    }

    const shareFile = async () => {
        try {
            // CID of the encrypted file that you want to share
            // CID is generated by uploading a file with encryption
            // Only the owner of the file can share it with another wallet address
            const cid = 'QmRJS5VC6qTvuvu47VNuQjKuEZnnPyT3NFRpj9NU6GR7Wf' // Example: "Qma7Na9sEdeM6aQeu6bUFW54HktNnW2k8g226VunXBhrn7";
            const publicKey = address // Example: "0xa3c960b3ba29367ecbcaf1430452c6cd7516f588";
            const messageRequested = (await lighthouse.getAuthMessage(address)).data.message
            const signedMessage = await signMessage(messageRequested, uiConfig);

            const publicKeyUserB = ["0xf3A88e11B2252643615A457941f22aCa655DB47a"] //Example: 0x487fc2fE07c593EAb555729c3DD6dF85020B5160

            const response = await lighthouse.getUploads("d257291d.f1c891385d364961a1be2577212e7eed")
            console.log(response)

            const shareResponse = await lighthouse.shareFile(
                publicKey,
                publicKeyUserB,
                cid,
                signedMessage
            )

            console.log(shareResponse)
            /* Sample Response
              {
                data: {
                  cid: 'QmTsC1UxihvZYBcrA36DGpikiyR8ShosCcygKojHVdjpGd',
                  shareTo: [ '0x487fc2fE07c593EAb555729c3DD6dF85020B5160' ],
                  status: 'Success'
                }
              }
            */
        } catch (error) {
            console.log(error)
        }
    }



    return (
        <div className="App">
            <button onClick={() => decrypt()}>decrypt</button>
            {
                fileURL ?
                    <a href={fileURL} target="_blank">viewFile</a>
                    :
                    null
            }
            <button onClick={() => shareFile()}>Share file</button>
        </div>
    )
}

export default App;