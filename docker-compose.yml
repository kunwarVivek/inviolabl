version: "3.8" # Upgrade to a more recent version if possible for better features and performance

services:
  nginx:
    image: nginx:stable-alpine # Use the alpine version for a smaller image size
    restart: unless-stopped
    container_name: ${PROJECT_SLUG}_nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - internal
    volumes:
      - ./backend:/app/backend # Add read-only if no modification is needed
      - ./conf/nginx/:/etc/nginx:ro
      # - /etc/nginx/data/certs/:/etc/nginx/data/certs/
      - ./logs/nginx/:/var/log/nginx
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - backend

  backend:
    env_file:
      - .env
    container_name: ${PROJECT_SLUG}_backend
    restart: unless-stopped
    build: ./backend/
    ports:
      - "${PORT}:${PORT}"
    environment:
      DATABASE_CLIENT: postgres
      DATABASE_HOST: postgres
      DATABASE_NAME: ${DB_DATABASE}
      DATABASE_USERNAME: ${DB_USERNAME}
      DATABASE_PORT: ${DB_PORT}
      DATABASE_PASSWORD: ${DB_PASSWORD}
      NODE_ENV: ${NODE_ENV}
    networks:
      - internal
    depends_on:
      - postgres

  frontend:
    container_name: ${PROJECT_SLUG}_frontend
    restart: unless-stopped
    build: ./frontend/
    ports:
      - "3000:3000"
    networks:
      - internal
    depends_on:
      - backend

  postgres:
    image: postgres:12.0-alpine # Use alpine for smaller image size
    container_name: ${PROJECT_SLUG}_postgres
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - internal

volumes:
  postgres:
    # driver: local  # Uncomment and specify if needed

networks:
  internal:
    name: ${PROJECT_SLUG}_internal
    driver: bridge
